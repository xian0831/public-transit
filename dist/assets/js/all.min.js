"use strict";!function(){angular.module("transit-app",["ui.router"]),angular.module("transit-app").constant("WMATA_API_KEY","b8d72d4443d84c0a9acc8c6e4481a3b9")}(),function(){function t(t,e){var o=this;o.getSchedule=function(){var t=new Date,e=t.getHours()+":"+t.getMinutes()+":"+t.getSeconds();o.schedules=i(o.originationId,o.destinationId).filter(function(t){return t.origTime>=e&&t.origTime<"24:00:00"}),console.log(i(o.originationId,o.destinationId).filter(function(t){return t.origTime>=e}))},e.stops().then(function(t){return Papa.parse(t.data,{delimiter:",",header:!0}).data}).then(function(t){o.stops=t}),e.stopTimes().then(function(t){return Papa.parse(t.data,{delimiter:",",header:!0}).data}).then(function(e){o.stopTimes=e,t.log(o.stopTimes)});var i=function(t,e){for(var i,r,a,s=[],c=0,u=o.stopTimes.length;u>c;c++)t===o.stopTimes[c].stop_id?(i=o.stopTimes[c].trip_id,r=o.stopTimes[c].stop_sequence,a=o.stopTimes[c].arrival_time):e===o.stopTimes[c].stop_id&&i===o.stopTimes[c].trip_id&&r<o.stopTimes[c].stop_sequence&&(s.push({tripId:i,origTime:a,distTime:o.stopTimes[c].arrival_time,duration:n(a,o.stopTimes[c].arrival_time)}),console.log(i+" "+r+" "+o.stopTimes[c].stop_sequence));return s},n=function(t,e){var o=t.split(":"),i=e.split(":"),n=60*+i[0]+ +i[1]-(60*+o[0]+ +o[1]);return n}}angular.module("transit-app").controller("HomeController",t),t.$inject=["$log","localResourceService"]}(),function(){function t(t){function e(){return t.get("data/agency.json")}function o(){return t.get("data/rail_stops.txt")}function i(){return t.get("data/rail_stop_time.txt")}var n;return n={agency:e,stops:o,stopTimes:i}}angular.module("transit-app").factory("localResourceService",t),t.$inject=["$http"]}(),function(){function t(t,e){function o(){return e({method:"GET",url:"https://api.wmata.com/Rail.svc/json/jStations?LineCode=RD",headers:{api_key:"b8d72d4443d84c0a9acc8c6e4481a3b9"}})}var i;return i={stops:o}}angular.module("transit-app").factory("trainResourceService",t),t.$inject=["WMATA_API_KEY","$http"]}(),function(){function t(t,e){e.otherwise("/home"),t.state("home",{url:"/home",templateUrl:"app/partials/home/home.html",controller:"HomeController",controllerAs:"homeCtrl"}).state("about",{})}angular.module("transit-app").config(t),t.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"serviceWorker"in navigator&&navigator.serviceWorker.register("/sw.js",{scope:"/"}).then(function(t){console.log("Registration succeeded. Scope is "+t.scope)})["catch"](function(t){console.log("Registration failed with "+t)})}();
//# sourceMappingURL=data:application/json;base64,
